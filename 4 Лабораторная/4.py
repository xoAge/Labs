# С клавиатуры вводится два числа K и N.
# Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц,
# B,C,D,E заполняется случайным образом целыми числами в интервале [-10,10].
# Для отладки использовать не случайное заполнение, а целенаправленное.
# Вид матрицы А:
# Е	В
# D	С
# Для простоты все индексы в подматрицах относительные.
# По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
# Программа должна использовать функции библиотек numpy  и mathplotlib
# Формируется матрица F следующим образом: скопировать в нее А и если в С количество нулей
# по периметру больше, чем произведение чисел по периметру , то поменять местами С и Е симметрично,
# иначе С и В поменять местами несимметрично. При этом матрица А не меняется. После чего
# если определитель матрицы А больше суммы диагональных элементов матрицы F,
# то вычисляется выражение: A-1*AT – K * F, иначе вычисляется выражение (A +G-F-1)*K,
# где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F
# и все матричные операции последовательно.

import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
try:
    k = int(input("Введите число K, являющееся коэффициентом при умножении: "))
    n = int(input("Введите число N, больше 3 которое является размером матрицы: "))
    while n < 4:
        n = int(input("Введите число больше 3: "))
    A = np.random.randint(-10, 10, (n, n))
    #A = np.zeros((n, n))
    length = n // 2
    E = np.array(A[:length, :length])
    B = np.array(A[:length, length+n % 2:n])
    C = np.array(A[length+n % 2:n, length+n % 2:n])
    F = A.copy()
    x = np.array(C)
    print("\nМатрица А\n",A)
    print("\nПодматрица С\n",C)
    print("\nПодматрица E\n", E)
    print("\nПодматрица B\n", B)

    nuli = np.count_nonzero(x[:] == 0)
    print("Количество нулей:", nuli)
    pro = 1
    for i in range(x.shape[0]):
        for j in range(x.shape[1]):
            pro *= x[i][j]
    print("Произведение чисел:", pro)
    if nuli > pro:
        print("количество нулей больше произведения чисел, меняем С и E симметрично")
        F[length+n % 2:n, length+n % 2:n] = E[:length, ::-1]
        F[:length, :length] = C[:length, ::-1]
    else:
        print("Произведение чисел больше количества нулей, меняем С и B несимметрично")
        F[length+n % 2:n, length+n % 2:n] = B
        F[:length, length+n % 2:n] = C
    print("\nизмененная матрица F\n", F)
    try:
        det = np.linalg.det(A)
        trace = np.trace(F) + np.trace(np.rot90(F))
        print("Определитель матрицы А:", int(det), "\nСумма диагональных элементов матрицы F:", trace)
        if det > trace:
            print("Определитель матрицы А больше суммы диагональных элементов матрицы F, вычисляем выражение A - 1 * Atr - K * F")
            otv = A - 1 * A.transpose() - k * F
            print(otv)
        else:
            print("Определитель матрицы А меньше суммы диагональных элементов матрицы F, вычисляем выражение (A + G - F - 1) * K")
            G = np.tri(n) * A
            otv = (A + G - F - 1) * k
            print(otv)
    except np.linalg.LinAlgError:
        print("определитель одной из матриц равен 0, поэтому обратную матрицу найти невозможно.")
    print("\nМатрица, которая используется при построение графиков:\n", A)

    explode = [0] * (n - 1)                     # отношение средних значений от каждой строки
    explode.append(0.1)
    plt.title("Круговая диаграмма")
    sizes = [round(np.mean(abs(F[i, ::])) * 100 / 1) for i in range(n)]
    plt.pie(sizes, labels=list(range(1, n + 1)), explode=explode, autopct='%1.1f%%', shadow=True)
    plt.show()

    plt.plot(A)
    plt.title("График с использованием функции plot")
    plt.ylabel("значение элемента")
    plt.xlabel("номер элемента в строке")
    plt.show()

    sns.heatmap(A, cmap="Spectral", annot=True)
    plt.title("Тепловая карта")
    plt.ylabel("Номер строки")
    plt.xlabel("Номер столбца")
    plt.show()

except ValueError:
    print("Программа завершена, введите число")
